<?php
/**
 * ScheduleEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Schedule
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Schedule API
 *
 * ConnectWise Schedule API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Schedule\Model;

use \ArrayAccess;

/**
 * ScheduleEntry Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Schedule
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ScheduleEntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ScheduleEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'object_id' => 'int',
        'name' => 'string',
        'member' => '\Spinen\ConnectWise\Clients\Schedule\Model\MemberReference',
        'where' => '\Spinen\ConnectWise\Clients\Schedule\Model\ServiceLocationReference',
        'date_start' => '\DateTime',
        'date_end' => '\DateTime',
        'reminder' => '\Spinen\ConnectWise\Clients\Schedule\Model\ReminderReference',
        'status' => '\Spinen\ConnectWise\Clients\Schedule\Model\ScheduleStatusReference',
        'type' => '\Spinen\ConnectWise\Clients\Schedule\Model\ScheduleTypeReference',
        'span' => '\Spinen\ConnectWise\Clients\Schedule\Model\ScheduleSpanReference',
        'done_flag' => 'bool',
        'acknowledged_flag' => 'bool',
        'owner_flag' => 'bool',
        'allow_schedule_conflicts_flag' => 'bool',
        'add_member_to_project_flag' => 'bool',
        'project_role_id' => 'int',
        'mobile_guid' => '\Spinen\ConnectWise\Clients\Schedule\Model\Guid',
        'close_date' => '\DateTime',
        'hours' => 'double',
        '_info' => '\Spinen\ConnectWise\Clients\Schedule\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object_id' => 'objectId',
        'name' => 'name',
        'member' => 'member',
        'where' => 'where',
        'date_start' => 'dateStart',
        'date_end' => 'dateEnd',
        'reminder' => 'reminder',
        'status' => 'status',
        'type' => 'type',
        'span' => 'span',
        'done_flag' => 'doneFlag',
        'acknowledged_flag' => 'acknowledgedFlag',
        'owner_flag' => 'ownerFlag',
        'allow_schedule_conflicts_flag' => 'allowScheduleConflictsFlag',
        'add_member_to_project_flag' => 'addMemberToProjectFlag',
        'project_role_id' => 'projectRoleId',
        'mobile_guid' => 'mobileGuid',
        'close_date' => 'closeDate',
        'hours' => 'hours',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object_id' => 'setObjectId',
        'name' => 'setName',
        'member' => 'setMember',
        'where' => 'setWhere',
        'date_start' => 'setDateStart',
        'date_end' => 'setDateEnd',
        'reminder' => 'setReminder',
        'status' => 'setStatus',
        'type' => 'setType',
        'span' => 'setSpan',
        'done_flag' => 'setDoneFlag',
        'acknowledged_flag' => 'setAcknowledgedFlag',
        'owner_flag' => 'setOwnerFlag',
        'allow_schedule_conflicts_flag' => 'setAllowScheduleConflictsFlag',
        'add_member_to_project_flag' => 'setAddMemberToProjectFlag',
        'project_role_id' => 'setProjectRoleId',
        'mobile_guid' => 'setMobileGuid',
        'close_date' => 'setCloseDate',
        'hours' => 'setHours',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object_id' => 'getObjectId',
        'name' => 'getName',
        'member' => 'getMember',
        'where' => 'getWhere',
        'date_start' => 'getDateStart',
        'date_end' => 'getDateEnd',
        'reminder' => 'getReminder',
        'status' => 'getStatus',
        'type' => 'getType',
        'span' => 'getSpan',
        'done_flag' => 'getDoneFlag',
        'acknowledged_flag' => 'getAcknowledgedFlag',
        'owner_flag' => 'getOwnerFlag',
        'allow_schedule_conflicts_flag' => 'getAllowScheduleConflictsFlag',
        'add_member_to_project_flag' => 'getAddMemberToProjectFlag',
        'project_role_id' => 'getProjectRoleId',
        'mobile_guid' => 'getMobileGuid',
        'close_date' => 'getCloseDate',
        'hours' => 'getHours',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['object_id'] = isset($data['object_id']) ? $data['object_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['where'] = isset($data['where']) ? $data['where'] : null;
        $this->container['date_start'] = isset($data['date_start']) ? $data['date_start'] : null;
        $this->container['date_end'] = isset($data['date_end']) ? $data['date_end'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['span'] = isset($data['span']) ? $data['span'] : null;
        $this->container['done_flag'] = isset($data['done_flag']) ? $data['done_flag'] : null;
        $this->container['acknowledged_flag'] = isset($data['acknowledged_flag']) ? $data['acknowledged_flag'] : null;
        $this->container['owner_flag'] = isset($data['owner_flag']) ? $data['owner_flag'] : null;
        $this->container['allow_schedule_conflicts_flag'] = isset($data['allow_schedule_conflicts_flag']) ? $data['allow_schedule_conflicts_flag'] : null;
        $this->container['add_member_to_project_flag'] = isset($data['add_member_to_project_flag']) ? $data['add_member_to_project_flag'] : null;
        $this->container['project_role_id'] = isset($data['project_role_id']) ? $data['project_role_id'] : null;
        $this->container['mobile_guid'] = isset($data['mobile_guid']) ? $data['mobile_guid'] : null;
        $this->container['close_date'] = isset($data['close_date']) ? $data['close_date'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 250)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 250.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['name']) > 250) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object_id
     * @return int
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     * @param int $object_id
     * @return $this
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ScheduleEntry., must be smaller than or equal to 250.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\MemberReference $member Activity schedule requires a member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets where
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\ServiceLocationReference
     */
    public function getWhere()
    {
        return $this->container['where'];
    }

    /**
     * Sets where
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\ServiceLocationReference $where
     * @return $this
     */
    public function setWhere($where)
    {
        $this->container['where'] = $where;

        return $this;
    }

    /**
     * Gets date_start
     * @return \DateTime
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     * @param \DateTime $date_start
     * @return $this
     */
    public function setDateStart($date_start)
    {
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets date_end
     * @return \DateTime
     */
    public function getDateEnd()
    {
        return $this->container['date_end'];
    }

    /**
     * Sets date_end
     * @param \DateTime $date_end
     * @return $this
     */
    public function setDateEnd($date_end)
    {
        $this->container['date_end'] = $date_end;

        return $this;
    }

    /**
     * Gets reminder
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\ReminderReference
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\ReminderReference $reminder
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\ScheduleStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\ScheduleStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\ScheduleTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\ScheduleTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets span
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\ScheduleSpanReference
     */
    public function getSpan()
    {
        return $this->container['span'];
    }

    /**
     * Sets span
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\ScheduleSpanReference $span
     * @return $this
     */
    public function setSpan($span)
    {
        $this->container['span'] = $span;

        return $this;
    }

    /**
     * Gets done_flag
     * @return bool
     */
    public function getDoneFlag()
    {
        return $this->container['done_flag'];
    }

    /**
     * Sets done_flag
     * @param bool $done_flag
     * @return $this
     */
    public function setDoneFlag($done_flag)
    {
        $this->container['done_flag'] = $done_flag;

        return $this;
    }

    /**
     * Gets acknowledged_flag
     * @return bool
     */
    public function getAcknowledgedFlag()
    {
        return $this->container['acknowledged_flag'];
    }

    /**
     * Sets acknowledged_flag
     * @param bool $acknowledged_flag
     * @return $this
     */
    public function setAcknowledgedFlag($acknowledged_flag)
    {
        $this->container['acknowledged_flag'] = $acknowledged_flag;

        return $this;
    }

    /**
     * Gets owner_flag
     * @return bool
     */
    public function getOwnerFlag()
    {
        return $this->container['owner_flag'];
    }

    /**
     * Sets owner_flag
     * @param bool $owner_flag
     * @return $this
     */
    public function setOwnerFlag($owner_flag)
    {
        $this->container['owner_flag'] = $owner_flag;

        return $this;
    }

    /**
     * Gets allow_schedule_conflicts_flag
     * @return bool
     */
    public function getAllowScheduleConflictsFlag()
    {
        return $this->container['allow_schedule_conflicts_flag'];
    }

    /**
     * Sets allow_schedule_conflicts_flag
     * @param bool $allow_schedule_conflicts_flag
     * @return $this
     */
    public function setAllowScheduleConflictsFlag($allow_schedule_conflicts_flag)
    {
        $this->container['allow_schedule_conflicts_flag'] = $allow_schedule_conflicts_flag;

        return $this;
    }

    /**
     * Gets add_member_to_project_flag
     * @return bool
     */
    public function getAddMemberToProjectFlag()
    {
        return $this->container['add_member_to_project_flag'];
    }

    /**
     * Sets add_member_to_project_flag
     * @param bool $add_member_to_project_flag
     * @return $this
     */
    public function setAddMemberToProjectFlag($add_member_to_project_flag)
    {
        $this->container['add_member_to_project_flag'] = $add_member_to_project_flag;

        return $this;
    }

    /**
     * Gets project_role_id
     * @return int
     */
    public function getProjectRoleId()
    {
        return $this->container['project_role_id'];
    }

    /**
     * Sets project_role_id
     * @param int $project_role_id
     * @return $this
     */
    public function setProjectRoleId($project_role_id)
    {
        $this->container['project_role_id'] = $project_role_id;

        return $this;
    }

    /**
     * Gets mobile_guid
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\Guid
     */
    public function getMobileGuid()
    {
        return $this->container['mobile_guid'];
    }

    /**
     * Sets mobile_guid
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\Guid $mobile_guid
     * @return $this
     */
    public function setMobileGuid($mobile_guid)
    {
        $this->container['mobile_guid'] = $mobile_guid;

        return $this;
    }

    /**
     * Gets close_date
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     * @param \DateTime $close_date
     * @return $this
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets hours
     * @return double
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     * @param double $hours
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Schedule\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Schedule\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Schedule\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Schedule\ObjectSerializer::sanitizeForSerialization($this));
    }
}


